arr.sort((a, b) => { //通过判断传入的数组的长度等信息选择最合适的排序方法，比如chromeV8实现是 数组长度小于10使用插入排序 否则使用快速排序
    // 返回 -1 不交换位置
    // 返回 1 交换位置
})

function bubbleSort(arr = []) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        for(var j = 0; j < len - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                var temp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = temp;
            }
        }
    }
    return arr;
}

function quickSort(arr = []) { // 快速排序
    if (arr.length <= 1) { return arr}
    const pivotIndex = Math.floor(arr.length / 2);
    const pivot = arr.splice(pivotIndex, 1)[0]
    const left = [], right = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] < pivot) {
            left.push(arr[i])
        } else {
            right.push(arr[i])
        }
    }
    return [...quickSort(left), pivot, ...quickSort(right)]
}
