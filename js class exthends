// 出处：https://www.jianshu.com/p/85899e287694

// 1.原型链继承
// 缺点：不能传参；引用类型的属性共享 修改一处影响所有实例
function Person(){
    this.name = 'xiaopao';
    this.colors = ['red', 'blue', 'green'];
}
Person.prototype.getName = function(){
    console.log(this.name);
}
function Child(){
}
Child.prototype = new Person();
var child1 = new Child();
var child2 = new Child();
child1.colors.push('yellow');
console.log(child1.colors);
console.log(child2.colors);

// 2.借用构造函数继承
// 优点：避免了引用类型被所有实例共享；可以向父类构造器传参
// 缺点：只是子类实例不是父类实例；方法在构造器中每次都会创建一遍；父类的prototype访问不到
function Person(){
    this.name = 'xiaopao';
    this.colors = ['red', 'blue', 'green'];
}
Person.prototype.getName = function(){
    console.log(this.name);
}
function Child(){
    Person.call(this);
}
var child1 = new Child();
var child2 = new Child();
child1.colors.push('yellow');
console.log(child1.colors); // ["red", "blue", "green", "yellow"]
console.log(child2.colors); // ["red", "blue", "green"]
console.log(child1 instanceof Person); // false   不能识别是Person的实例

// 3.组合继承 将两者结合
// 优点：融合原型链继承和构造函数的优点，是JavaScript中最常用的继承模式
// 缺点：调用了两次父类构造函数，一次是在创建子类型原型的时候，另一次是在子类型构造函数内部
function Parent(name){
    this.name = name;
    this.colors = ['red', 'blue', 'green'];
}
Parent.prototype.getName = function(){
    console.log(this.name);
}
function Child(name,age){
    Parent.call(this,name);// 第二次调用 Parent()
    this.age = age;
}
Child.prototype = new Parent(); // 第一次调用 Parent()

// 4.寄生组合继承
// 过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点
(function(){
  // 创建一个没有实例方法的类
  var Super = function(){};
  Super.prototype = Parent.prototype;
  //将实例作为子类的原型
  Child.prototype = new Super();
  Child.prototype.constructor = Child;
})();

// 5 es6 class
